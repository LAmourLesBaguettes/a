프로그램 실행 흐름
1. 프로그램이 시작되면, 좌석 상태 배열이 초기화
2. 현재 좌석 상태 출력
3. 사용자는 좌석을 예약하지 여부를 묻는 메시지를 받음
   y를 입력하면 좌석 예약 메뉴로
   n을 입력하면 프로그램 종료
4. 사용자가 선택한 좌석을 예약하고 다시 현재 좌석 상태를 출력
5. 사용자가 프로그램을 종료할 때까지 반복


package lab01;

import java.util.Scanner;

public class SeatReservation {
    // 표준 입력 스트림 Scanner 객체 생성
    public static Scanner input = new Scanner(System.in);
// Scanner 객체 input을 생성하여 표준 입력에서 사용자 입력을 받을 수 있도록 설정
 
    // 좌석 상태 배열 seats 생성
    public static int[] seats;
// seat 정수 배열 선언, 좌석의 예약 상태를 나타내며, 각 배열의 요소는 좌석 하나에 해당
// 배열 값이 0이면 예약되지 않은 좌석을 의미하고 1이면 예약된 좌석을 의미


    // 좌석 배열 초기화 메소드 initSeat() 구현
    private static void initSeat(int num) {
// initSeat(int num) 메소드는 num 개의 좌석 배열을 생성하고 모든 좌석을 0으로 초기화 
// 모든 좌석을 예약되지 않은 상태로 설정

        seats = new int[num]; //좌석 0으로 초기화 
        for (int i = 0; i < num; i++){        // num은 좌석의 개수, 이 값에 따라 배열의 크기가 정해짐
            seats[i] = 0; // 0은 예약 안됨      // 배열이 생성되면 for 루프를 통해서 모든 좌석을 0으로 초기화
        }

    }

    // 현재 좌석 예약 상황을 보여주는 메소드 구현
    private static void viewCurrentSeat() {

        System.out.println("예약상태 (0: 빈 좌석, 1: 예약 좌석):");
        System.out.println("좌석번호");             // System.out.println(좌석번호); 를 통해 좌석 번호를 출력
        for (int i = 1; i <= seats.length; i++){  //  for 루프에서 i값을 1부터 시작해 좌석의 개수(seat.length)까지 증가시키며 좌석 번호를 출력 
            System.out.print(i+"");
        }
        System.out.println();                   // 좌석 번호를 출력한 후 System.out.println()을 호출하여 다음으로 넘어감

        System.out.print("예약상태:");             // 좌석의 현재 예약 상태를 출력 
        for (int seat : seats) {                 // for 루프에서 각 seat 값이 0인지 1인지 확인하여 좌석 상태를 출력
            System.out.print(seat + " ");
        }
        System.out.println();
    }
// viewCurrentSeat() 메소드는 현재 좌석의 예약 상태를 출력
// 첫 번쨰 for문은 좌석 번호를 출력하고 두 번째 for문은 좌석의 예약 상태(0 또는 1)를 출력


    // 사용자의 입력을 받아 좌석을 예약하는 메소드
    private static void reservationMenu() {
        int seatChoice;
        System.out.print("몇 번째 좌석을 예약하시겠습니까?(1~" + seats.length + ") ");  // 사용자가 선택할 수 있는 좌석 번호 범위를 출력
        seatChoice = input.nextInt();                                           // input.nextInt();를 사용해 사용자가 입력한 좌석 번호 seatChoice 변수에 저장

        // 입력 받은 정수값이 유효한 좌석번호(1~10)인지 확인
        if(seatChoice < 1 || seatChoice > seats.length) {                      // 만약 seatChoice가 1보다 작거나 seat.length 보다 크면 이는 잘못된 입력으로 유효하지 않다고 메시지 출력 
            System.out.println("유효하지 않은 좌석번호입니다. 다시 입력해 주세요.");
            return;  // 예약 메소드를 종료하고 다시 입력을 받도록 함
        }

        // 이미 예약된 좌석인지 확인
        if(seats[seatChoice - 1] == 1) {                                 // 값이 1이면 예약 상태임을 출력 
            System.out.println(seatChoice + "번 좌석이 이미 예약되었습니다.");
        } else {                                                         // 좌석이 비어있으면 1로 변경하여 예약된 상태로 만듬
            // 빈 좌석이면, 해당 좌석을 예약 상태로 설정
            seats[seatChoice - 1] = 1;
            System.out.println(seatChoice + "번 좌석이 예약되었습니다.");
        }
    }
// reservationMenu() 메소드는 사용자가 선택한 좌석을 예약하는 기능
// 사용자는 예약하고자 하는 좌석의 번호를 입력하고 입력한 좌석 번호가 유효한지 확인
// 유효하지 않은 좌석 번호를 입력한 경우 오류 메시지를 출력하고 메소드를 종료
// 선택한 좌석이 이미 예약된 경우 오류 메시지 출력하고 메소드 종료 
// 빈 좌석의 경우 해당 좌석을 1로 설정하여 예약 처리하고 예약 완료 메시지를 출력


    public static void main(String[] args) {            // 메인 메소드 main
        // 극장 좌석 갯수(10)를 상수(NUM_SEATS)로 선언
        final int NUM_SEATS = 10;                       // 10으로 초기화 
        initSeat(NUM_SEATS);                            // 10개의 좌석 배열을 초기화하고 모든 좌석은 비어 있는 상태(0)로 초기화 

        while (true) {                                    // while 루프를 사용하여 프로그램이 종료될 때까지 계속해서 좌석 예약 기능 실행 

            viewCurrentSeat();                            // 현재 좌석의 예약 상태를 출력 
            System.out.print("죄석을 예약하시겠습니까?(y/n)");
            String response = input.next();               // 입력을 받아 response에 저장
            if (response.equalsIgnoreCase("y")) {          
                reservationMenu();  // 좌석 예약 처리
            } else if (response.equalsIgnoreCase("n")) {
                break;  // 예약 종료
            } else {
                System.out.println("유효하지 않은 입력입니다. 다시 입력해 주세요.");
            }
        }
        System.out.println("프로그램을 종료합니다.");
    }
}

// main 메소드는 프로그램의 시작점이며 좌석 예약 시스템의 주요 흐름을 관리
// NUM_SEATS 상수를 정의하여 총 10개의 좌석을 초기화
// 무한 루프를 사용하여 사용자에게 계속해서 좌석 예약을 물어봄 사용자가 y를 입력하면 reservationView를 호출하여 좌석을 예약하도록 하고
// n을 입력하면 프로그램을 종료
// y나 n외에 다른 입력이 들어오면 유효하지 않은 입력임을 알리고 다시 입력

